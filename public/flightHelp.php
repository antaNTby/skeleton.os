<?php

// Основные Методы
Flight::map( строка $name, callable $callback, bool $pass_route = false );                                      // Создает пользовательский метод фреймворка.
Flight::register( строка $name, строка $class, массив $params = [],  ? callable $callback = null ); // Регистрирует класс для метода фреймворка.
Flight::before( строка $name, callable $callback );                                                             // Добавляет фильтр перед методом фреймворка.
Flight::after( строка $name, callable $callback );                                                              // Добавляет фильтр после метода фреймворка.
Flight::path( строка $path );                                                                                   // Добавляет путь для автозагрузки классов.
Flight::get( строка $key );                                                                                     // Получает переменную.
Flight::set( строка $key, смешанный $value );                                                          // Устанавливает переменную.
Flight::has( строка $key );                                                                                     // Проверяет, установлена ли переменная.
Flight::clear( массив | строка $key = [] );                                                               // Очищает переменную.
Flight::init();                                                                                                     // Инициализирует фреймворк к его настройкам по умолчанию.
Flight::app();                                                                                                      // Получает экземпляр объекта приложения.

// Расширяемые Методы
Flight::start();                                                                                                                                           // Запускает фреймворк.
Flight::stop();                                                                                                                                            // Останавливает фреймворк и отправляет ответ.
Flight::halt( int $code = 200, строка $message = '' );                                                                                                 // Останавливает фреймворк с необязательным кодом состояния и сообщением.
Flight::route( строка $pattern, callable $callback, bool $pass_route = false );                                                                        // Сопоставляет шаблон URL с обратным вызовом.
Flight::group( строка $pattern, callable $callback );                                                                                                  // Создает группировку для URL, шаблон должен быть строкой.
Flight::redirect( строка $url, int $code );                                                                                                            // Перенаправляет на другой URL.
Flight::render( строка $file, массив $data, ?строка $key = null );                                                                         // Рендерит файл шаблона.
Flight::error( Throwable $error );                                                                                                                           // Отправляет ответ HTTP 500.
Flight::notFound();                                                                                                                                        // Отправляет ответ HTTP 404.
Flight::etag( строка $id, строка $type = 'string' );                                                                                             // Выполняет кэширование HTTP ETag.
Flight::lastModified( int $time );                                                                                                                           // Выполняет кэширование HTTP Last-Modified.
Flight::json( смешанный $data, int $code = 200, bool $encode = true, строка $charset = 'utf8', int $option );                                 // Отправляет ответ JSON.
Flight::jsonp( смешанный $data, строка $param = 'jsonp', int $code = 200, bool $encode = true, строка $charset = 'utf8', int $option ); // Отправляет ответ JSONP.
// Любые пользовательские методы, добавленные с помощью map и register, также могут быть отфильтрованы.//

bdump(
	[
		__DIR__,
		__ROOT__,
		__APP__,
		__PUBLIC__,
		SITE_URL,
		LOGO256,
		LOGO64,

	]
);

/*

session.serialize_handler чем отличается php и php_serialize
Директива session.serialize_handler в PHP определяет метод (обработчик) для сериализации и десериализации данных сессии. Варианты php и php_serialize имеют ключевые различия в подходе к обработке данных:

1. php
Описание: Этот метод использует старый, собственный формат сериализации PHP. Он сохраняет данные в текстовом формате, который компактный и эффективный, но поддерживает только базовые типы данных (массивы, строки, числа).

Особенности:

Более простой, но устаревший формат.

Не поддерживает сериализацию объектов (например, если в сессии есть экземпляры классов).

Ограничен по функциональности в современных версиях PHP.

2. php_serialize
Описание: Этот метод использует встроенные функции serialize() и unserialize() для обработки данных сессии. Это современный стандарт в PHP, рекомендованный для большей гибкости и совместимости.

Особенности:

Поддерживает сложные структуры данных, включая объекты.

Позволяет сериализовать данные, содержащие ссылки.

Широко используется, особенно в современных PHP-проектах.

*/

/**/

#####################    /*
#####################    $relaccess = checkLogin();
#####################
#####################    if (! isset($_SESSION['log']) || ! in_array(100, $relaccess)) {
#####################
#####################        if (isset($_POST['user_login']) && isset($_POST['user_pw'])) {
#####################            // regForceSavePassword($_POST['user_login'], $_POST['user_pw']);
#####################
#####################            $hs = verifyPassword($_POST['user_login'], $_POST['user_pw']);
#####################
#####################            if ($hs) {
#####################                $url = set_query('&__tt=');
#####################                // bdump($url);
#####################                Redirect($url);
#####################            }
#####################
#####################            die(ERROR_FORBIDDEN);
#####################        }
#####################
#####################        die(ERROR_FORBIDDEN);
#####################    }
#####################
#####################    //  else {
#####################    //     die(ERROR_FORBIDDEN);
#####################    // }
#####################
#####################    # user logout
#####################    if (isset($_GET['logout'])) {
#####################
#####################        unset($_SESSION['log']);
#####################        unset($_SESSION['pass']);
#####################        unset($_SESSION['current_currency']);
#####################
#####################        // RedirectJavaScript(ADMIN_FILE . '?access_deny=' . SITE_URL);
#####################        // RedirectJavaScript(ADMIN_FILE);
#####################
#####################        if (in_array(100, $relaccess)) {
#####################            Redirect('/');
#####################        } else {
#####################            // Redirect("/index.php?user_details=yes");
#####################            // Redirect('/index.php');
#####################            die(ERROR_FORBIDDEN);
#####################        }
#####################
#####################        die(ERROR_FORBIDDEN);
#####################    }*/

// $tplFetched = Flight::view()->fetch( 'admin.tpl.html' );
// // sdump($app);
// $app->fetch( 'string:The current smarty version is: {$smarty.version}.' );

// echo $tplFetched;

/*

session.serialize_handler чем отличается php и php_serialize
Директива session.serialize_handler в PHP определяет метод (обработчик) для сериализации и десериализации данных сессии. Варианты php и php_serialize имеют ключевые различия в подходе к обработке данных:

1. php
Описание: Этот метод использует старый, собственный формат сериализации PHP. Он сохраняет данные в текстовом формате, который компактный и эффективный, но поддерживает только базовые типы данных (массивы, строки, числа).

Особенности:

Более простой, но устаревший формат.

Не поддерживает сериализацию объектов (например, если в сессии есть экземпляры классов).

Ограничен по функциональности в современных версиях PHP.

2. php_serialize
Описание: Этот метод использует встроенные функции serialize() и unserialize() для обработки данных сессии. Это современный стандарт в PHP, рекомендованный для большей гибкости и совместимости.

Особенности:

Поддерживает сложные структуры данных, включая объекты.

Позволяет сериализовать данные, содержащие ссылки.

Широко используется, особенно в современных PHP-проектах.

*/

\FLight::logg( 'BANANA BANANA BANANA', [[123, 4234, 2423, 4234, 4243], [123, 4234, 2423, 4234, 4243], [123, 4234, 2423, 4234, 4243]] );

\debug( 'JUICE JUICE JUICE', [[123, 4234, 2423, 4234, 4243], [123, 4234, 2423, 4234, 4243], [123, 4234, 2423, 4234, 4243]] );